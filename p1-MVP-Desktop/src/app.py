"""
Interface Streamlit pour ShelfReader P1 - MVP Desktop
OCR adaptatif multi-√©chelle avec d√©tection intelligente de livres
"""

import streamlit as st
import os
import sys
import time
from PIL import Image
import numpy as np
import cv2
import tempfile
import pandas as pd

# Ajouter le r√©pertoire src au path pour importer nos modules
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Import de nos modules OCR
from ocr_easyocr import EasyOCRProcessor

# Configuration de la page
st.set_page_config(
    page_title="ShelfReader P1 - OCR Adaptatif",
    page_icon="üìö",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Titre principal
st.title("üìö ShelfReader P1 - OCR Adaptatif")
st.markdown("**D√©tection automatique de livres sur √©tag√®res avec OCR intelligent**")
st.markdown("---")

# Sidebar avec informations
with st.sidebar:
    st.header("‚ÑπÔ∏è Informations")
    st.markdown("""
    **Algorithme :** OCR Adaptatif Multi-√©chelle
    **Pr√©cision :** 93% (14/15 livres)
    **M√©thode :** Shelfie avec fallback intelligent
    **GPU :** Support automatique
    """)

    st.markdown("---")
    st.markdown("**Param√®tres recommand√©s :**")
    st.markdown("- **GPU** : Activ√© si disponible")
    st.markdown("- **Confiance** : 0.3 (optimis√©)")
    st.markdown("- **M√©thode** : Shelfie (adaptatif)")

    st.markdown("---")
    st.markdown("**Test√© sur :**")
    st.markdown("- books1.jpg : 14/15 livres (93%)")
    st.markdown("- 6 images : moyenne 83.8%")

# Fonction principale de traitement OCR
def process_image_with_ocr(image_path, confidence=0.3, use_gpu=True, debug=False):
    """Traite une image avec notre OCR adaptatif"""
    try:
        start_time = time.time()

        # Cr√©er le processeur OCR
        processor = EasyOCRProcessor(['en'], confidence, use_gpu)

        # Charger l'image
        pil_image = Image.open(image_path)

        # Traitement avec l'algorithme adaptatif
        boxes = processor.get_boxes(
            pil_image,
            preprocess=False,
            use_spine_detection=True,
            debug=debug,
            reference_titles=None,
            spine_method="shelfie"
        )

        text, avg_confidence = processor.get_text_and_confidence(
            pil_image,
            preprocess=False,
            use_spine_detection=True,
            reference_titles=None,
            spine_method="shelfie"
        )

        processing_time = time.time() - start_time

        # Formater les r√©sultats comme attendu par display_results
        results = {
            'books': boxes,
            'text': text,
            'confidence': avg_confidence,
            'processing_time': processing_time
        }

        return results, processing_time

    except Exception as e:
        st.error(f"Erreur lors du traitement OCR : {str(e)}")
        return None, 0

# Fonction pour afficher les r√©sultats
def display_results(results, processing_time):
    """Affiche les r√©sultats de l'OCR de mani√®re structur√©e"""
    if not results or 'books' not in results:
        st.error("Aucun r√©sultat OCR trouv√©")
        return

    books = results['books']

    # M√©triques principales
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("üìö Livres d√©tect√©s", len(books))

    with col2:
        avg_confidence = np.mean([book.get('confidence', 0) for book in books]) if books else 0
        st.metric("üéØ Confiance moyenne", f"{avg_confidence:.1%}")

    with col3:
        st.metric("‚ö° Temps de traitement", f"{processing_time:.2f}s")

    with col4:
        total_chars = sum(len(book.get('text', '')) for book in books)
        st.metric("üìù Caract√®res totaux", total_chars)

    st.markdown("---")

    # Affichage d√©taill√© des livres
    st.subheader("üìñ Livres d√©tect√©s")

    if books:
        # Cr√©er un DataFrame pour l'affichage
        books_data = []
        for i, book in enumerate(books, 1):
            books_data.append({
                "N¬∞": i,
                "Titre": book.get('text', 'N/A'),
                "Confiance": f"{book.get('confidence', 0):.1%}",
                "Position": f"x={book.get('x', 0)}, y={book.get('y', 0)}",
                "Dimensions": f"{book.get('width', 0)}√ó{book.get('height', 0)}"
            })

        df = pd.DataFrame(books_data)
        st.dataframe(df, use_container_width=True)

        # Affichage en format carte pour plus de lisibilit√©
        st.markdown("### üìã D√©tails par livre")
        for i, book in enumerate(books, 1):
            with st.expander(f"üìñ Livre {i} - {book.get('text', 'N/A')[:50]}..."):
                col1, col2 = st.columns(2)

                with col1:
                    st.write(f"**Texte complet :** {book.get('text', 'N/A')}")
                    st.write(f"**Confiance :** {book.get('confidence', 0):.1%}")

                with col2:
                    st.write(f"**Position :** x={book.get('x', 0)}, y={book.get('y', 0)}")
                    st.write(f"**Dimensions :** {book.get('width', 0)}√ó{book.get('height', 0)} px")

    else:
        st.warning("‚ö†Ô∏è Aucun livre d√©tect√© dans cette image")

# Fonction pour visualiser les zones d√©tect√©es
def visualize_detected_zones(image_path, books):
    """Cr√©e une visualisation des zones de livres d√©tect√©es sur l'image"""
    try:
        # Charger l'image avec OpenCV
        image = cv2.imread(image_path)
        if image is None:
            return None

        # Convertir BGR vers RGB pour Streamlit
        image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

        # Dessiner les rectangles pour chaque livre d√©tect√©
        for i, book in enumerate(books):
            x = int(book.get('x', 0))
            y = int(book.get('y', 0))
            width = int(book.get('width', 0))
            height = int(book.get('height', 0))

            # Couleur diff√©rente pour chaque livre (cycle √† travers les couleurs)
            colors = [(255, 0, 0), (0, 255, 0), (0, 0, 255), (255, 255, 0), (255, 0, 255), (0, 255, 255)]
            color = colors[i % len(colors)]

            # Dessiner le rectangle
            cv2.rectangle(image_rgb, (x, y), (x + width, y + height), color, 3)

            # Ajouter le num√©ro du livre
            cv2.putText(image_rgb, f"{i+1}", (x + 5, y + 30),
                       cv2.FONT_HERSHEY_SIMPLEX, 1, color, 2)

        return image_rgb

    except Exception as e:
        st.error(f"Erreur lors de la visualisation : {str(e)}")
        return None

# Interface principale
def main():
    st.header("üñºÔ∏è Upload et traitement d'image")

    # Upload d'image
    uploaded_file = st.file_uploader(
        "Choisissez une image d'√©tag√®re de livres",
        type=['jpg', 'jpeg', 'png'],
        help="Formats support√©s : JPG, PNG. Taille recommand√©e : 1000px minimum"
    )

    if uploaded_file is not None:
        # Afficher l'image upload√©e
        image = Image.open(uploaded_file)

        col1, col2 = st.columns([1, 1])

        with col1:
            st.subheader("üì∑ Image originale")
            st.image(image, use_column_width=True)

        with col2:
            st.subheader("‚öôÔ∏è Param√®tres de traitement")

            # Param√®tres configurables
            confidence = st.slider(
                "Seuil de confiance OCR",
                min_value=0.1,
                max_value=1.0,
                value=0.3,
                step=0.1,
                help="0.1 = tol√©rant, 0.5 = strict. Recommand√© : 0.3"
            )

            use_gpu = st.checkbox(
                "Utiliser le GPU (recommand√©)",
                value=True,
                help="Acc√©l√®re le traitement si GPU disponible"
            )

            debug_mode = st.checkbox(
                "Mode debug",
                value=False,
                help="Affiche les analyses d√©taill√©es (plus lent)"
            )

            # Bouton de traitement
            if st.button("üöÄ Lancer l'analyse OCR", type="primary", use_container_width=True):
                with st.spinner("üîç Analyse en cours avec algorithme adaptatif..."):
                    # Sauvegarder temporairement l'image
                    with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as tmp_file:
                        image.save(tmp_file.name, 'JPEG')
                        temp_path = tmp_file.name

                    try:
                        # Traiter l'image
                        results, processing_time = process_image_with_ocr(
                            temp_path,
                            confidence=confidence,
                            use_gpu=use_gpu,
                            debug=debug_mode
                        )

                        if results:
                            # Afficher les r√©sultats
                            st.success("‚úÖ Analyse termin√©e !")
                            display_results(results, processing_time)

                            # Visualisation des zones d√©tect√©es
                            if books := results.get('books'):
                                st.markdown("---")
                                st.subheader("üëÅÔ∏è Visualisation des zones d√©tect√©es")

                                # Cr√©er la visualisation
                                viz_image = visualize_detected_zones(temp_path, books)

                                if viz_image is not None:
                                    col1, col2 = st.columns(2)

                                    with col1:
                                        st.markdown("**üì∑ Image originale**")
                                        st.image(image, use_column_width=True)

                                    with col2:
                                        st.markdown("**üéØ Zones d√©tect√©es**")
                                        st.image(viz_image, caption=f"{len(books)} livres d√©tect√©s", use_column_width=True)

                                    st.info("üí° **L√©gende :** Chaque rectangle color√© repr√©sente un livre d√©tect√© avec son num√©ro")
                                else:
                                    st.warning("‚ö†Ô∏è Impossible de cr√©er la visualisation")

                            # Informations techniques
                            with st.expander("üîß Informations techniques"):
                                st.json(results)

                        else:
                            st.error("‚ùå √âchec de l'analyse OCR")

                    finally:
                        # Nettoyer le fichier temporaire
                        os.unlink(temp_path)

    else:
        # Message d'accueil quand aucune image n'est upload√©e
        st.info("üëÜ Veuillez uploader une image d'√©tag√®re de livres pour commencer l'analyse")

        # Exemples d'utilisation
        st.markdown("### üí° Conseils d'utilisation")
        st.markdown("""
        - **Qualit√© d'image** : Photos bien √©clair√©es, perpendiculaires √† l'√©tag√®re
        - **Taille minimale** : 1000 pixels de largeur recommand√©e
        - **Formats** : JPG ou PNG
        - **Contenu** : √âtageres de livres avec titres visibles
        """)

        # Images d'exemple
        st.markdown("### üñºÔ∏è Images de test disponibles")
        test_images_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "test_images")

        if os.path.exists(test_images_dir):
            test_images = [f for f in os.listdir(test_images_dir) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]

            if test_images:
                st.markdown("**Images disponibles pour test :**")
                for img in test_images:
                    st.code(f"test_images/{img}", language="text")
            else:
                st.info("Aucune image de test trouv√©e dans test_images/")

if __name__ == "__main__":
    main()

