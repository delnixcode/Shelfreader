"""
Interface Streamlit pour ShelfReader P1 - OCR Streamlit
OCR adaptatif multi-√©chelle avec d√©tection intelligente de livres
"""

import streamlit as st
import os
import sys
import time
from PIL import Image
import numpy as np
import cv2
import tempfile
import pandas as pd

# Ajouter le r√©pertoire src au path pour importer nos modules
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Import de nos modules OCR
from engines.easyocr_engine import EasyOCRProcessor
from engines.tesseract_engine import TesseractOCRProcessor
from engines.trocr_engine import TrOCRProcessor
from services.openlibrary_client import OpenLibraryClient

# Configuration de la page
st.set_page_config(
    page_title="ShelfReader P1 - OCR Adaptatif",
    page_icon="üìö",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Titre principal
st.title("üìö ShelfReader P1 - OCR Adaptatif")
st.markdown("**D√©tection automatique de livres sur √©tag√®res avec OCR intelligent**")
st.markdown("---")


# Sidebar navigation always at the top
with st.sidebar:
    page = st.radio(
        "Navigation",
        ["Analyse OCR", "Comparaison OCR"],
        index=0
    )
    st.markdown("---")
    st.header("‚ÑπÔ∏è Informations")
    st.markdown("**Algorithme :** OCR Adaptatif Multi-√©chelle")
    st.markdown("**Pr√©cision :** 93% (14/15 livres)")
    st.markdown("**GPU :** Support automatique")
    st.markdown("**Enrichissement :** Open Library int√©gr√©")
    st.markdown("---")
    st.markdown("**Param√®tres recommand√©s :**")
    st.markdown("- **GPU** : Activ√© si disponible")
    st.markdown("- **Confiance** : 0.3 (optimis√©)")
    st.markdown("---")
    st.markdown("**Test√© sur :**")
    st.markdown("- books1.jpg : 14/15 livres (93%)")
    st.markdown("- 6 images : moyenne 83.8%")

# Fonction principale de traitement OCR
def process_image_with_ocr(image_path, confidence=0.3, use_gpu=True, debug=False):
    """Traite une image avec notre OCR adaptatif"""
    try:
        start_time = time.time()

        # S√©lection du moteur OCR
        ocr_engine = st.session_state.get('ocr_engine', 'EasyOCR')
        if ocr_engine == 'EasyOCR':
            processor = EasyOCRProcessor(['en'], confidence, use_gpu)
            st.markdown("**GPU :** Support automatique")
            st.markdown("**Enrichissement :** Open Library int√©gr√©")
            boxes = processor.get_boxes(
                pil_image,
                preprocess=False,
                use_spine_detection=True,
                debug=debug,
                reference_titles=None,
            )
            text, avg_confidence = processor.get_text_and_confidence(
                pil_image,
                preprocess=False,
                use_spine_detection=True,
                reference_titles=None,
                spine_method="shelfie"
            )
        elif ocr_engine == 'Tesseract':
            processor = TesseractOCRProcessor('eng', confidence, use_gpu)
            pil_image = Image.open(image_path)
            # Tesseract retourne des boxes similaires
            boxes = processor.get_boxes(pil_image)
            text, avg_confidence = processor.get_text_and_confidence(pil_image)
        elif ocr_engine == 'TrOCR':
            processor = TrOCRProcessor(['en'], confidence, use_gpu)
            pil_image = Image.open(image_path)
            boxes = processor.get_boxes(pil_image)
            text, avg_confidence = processor.get_text_and_confidence(pil_image)
        else:
            st.error(f"Moteur OCR inconnu : {ocr_engine}")
            return None, 0

        processing_time = time.time() - start_time
        results = {
            'books': boxes,
            'text': text,
            'confidence': avg_confidence,
            'processing_time': processing_time
        }
        return results, processing_time
    except Exception as e:
        st.error(f"Erreur lors du traitement OCR : {str(e)}")
        return None, 0

# Fonction pour afficher les r√©sultats
def display_results(results, processing_time, enriched_books=None):
    """Affiche les r√©sultats de l'OCR de mani√®re structur√©e"""
    if not results or 'books' not in results:
        st.error("Aucun r√©sultat OCR trouv√©")
        return

    books = enriched_books if enriched_books else results['books']

    # Affichage pleine largeur pour desktop
    # M√©triques principales
    st.subheader("üìä R√©sultats de l'analyse")
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("üìö Livres d√©tect√©s", len(books))

    with col2:
        avg_confidence = np.mean([book.get('confidence', 0) for book in books]) if books else 0
        st.metric("üéØ Confiance moyenne", f"{avg_confidence:.1%}")

    with col3:
        st.metric("‚ö° Temps de traitement", f"{processing_time:.2f}s")

    with col4:
        enriched_count = sum(1 for book in books if book.get('enriched', False))
        st.metric("üìö Enrichis Open Library", f"{enriched_count}/{len(books)}")

    st.markdown("---")

    # Affichage d√©taill√© des livres
    st.subheader("üìñ Livres d√©tect√©s")

    if books:
        # Cr√©er un DataFrame pour l'affichage
        books_data = []
        for i, book in enumerate(books, 1):
            enriched = book.get('enriched', False)
            year = book.get('openlibrary_year', 'N/A') if enriched else 'N/A'
            year_str = str(year) if year != 'N/A' else 'N/A'
            ol_url = book.get('openlibrary_url') if enriched else None
            books_data.append({
                "N¬∞": i,
                "Titre OCR": book.get('text', 'N/A'),
                "Titre OL": book.get('openlibrary_title', 'N/A') if enriched else 'Non enrichi',
                "Auteur": book.get('openlibrary_author', 'N/A') if enriched else 'N/A',
                "Ann√©e": year_str,
                "Confiance": f"{book.get('confidence', 0):.1%}",
                "Enrichi": "‚úÖ" if enriched else "‚ùå",
                "Lien Open Library": ol_url if ol_url else ""
            })

        # Rendre le lien Open Library cliquable dans le tableau
        import html
        def make_link(url):
            if url:
                return f'<a href="{html.escape(url)}" target="_blank">üîó Open Library</a>'
            return ""

        # Cr√©er une table HTML pour affichage cliquable
        table_html = "<table style='width:100%; border-collapse:collapse;'>"
        # En-t√™tes
        headers = ["N¬∞", "Titre OCR", "Titre OL", "Auteur", "Ann√©e", "Confiance", "Enrichi", "Lien Open Library"]
        table_html += "<tr>" + "".join([f"<th style='border:1px solid #ccc; padding:4px'>{h}</th>" for h in headers]) + "</tr>"
        # Lignes
        for row in books_data:
            table_html += "<tr>"
            for h in headers[:-1]:
                table_html += f"<td style='border:1px solid #ccc; padding:4px'>{html.escape(str(row[h]))}</td>"
            # Lien cliquable
            table_html += f"<td style='border:1px solid #ccc; padding:4px'>{make_link(row['Lien Open Library'])}</td>"
            table_html += "</tr>"
        table_html += "</table>"
        st.markdown(table_html, unsafe_allow_html=True)


    else:
        st.warning("‚ö†Ô∏è Aucun livre d√©tect√© dans cette image")
def enrich_books_with_openlibrary(books, client):
    """Enrichit les r√©sultats OCR avec des informations de Open Library"""
    enriched_books = []

    for book in books:
        text = book.get('text', '').strip()
        if text:
            # Essayer d'enrichir avec Open Library
            enriched_info = client.get_book_info_for_ocr_result(text)

            if enriched_info:
                # Fusionner les informations OCR avec celles de Open Library
                enriched_book = book.copy()
                enriched_book.update({
                    'openlibrary_title': enriched_info.get('title'),
                    'openlibrary_author': enriched_info.get('author'),
                    'openlibrary_year': enriched_info.get('first_publish_year'),
                    'openlibrary_cover_url': enriched_info.get('cover_url'),
                    'openlibrary_url': enriched_info.get('open_library_url'),
                    'openlibrary_description': enriched_info.get('description'),
                    'openlibrary_subjects': enriched_info.get('subjects', []),
                    'enriched': True
                })
                enriched_books.append(enriched_book)
            else:
                # Ajouter le livre OCR sans enrichissement
                book_copy = book.copy()
                book_copy['enriched'] = False
                enriched_books.append(book_copy)
        else:
            book_copy = book.copy()
            book_copy['enriched'] = False
            enriched_books.append(book_copy)

    return enriched_books

# Fonction pour visualiser les zones d√©tect√©es
def visualize_detected_zones(image_path, books):
    """Cr√©e une visualisation des zones de livres d√©tect√©es sur l'image"""
    try:
        # Charger l'image avec OpenCV
        image = cv2.imread(image_path)
        if image is None:
            return None

        # Convertir BGR vers RGB pour Streamlit
        image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

        # Dessiner les rectangles pour chaque livre d√©tect√©
        for i, book in enumerate(books):
            x = int(book.get('x', 0))
            y = int(book.get('y', 0))
            width = int(book.get('width', 0))
            height = int(book.get('height', 0))

            # Couleur diff√©rente pour chaque livre (cycle √† travers les couleurs)
            colors = [(255, 0, 0), (0, 255, 0), (0, 0, 255), (255, 255, 0), (255, 0, 255), (0, 255, 255)]
            color = colors[i % len(colors)]

            # Dessiner le rectangle
            cv2.rectangle(image_rgb, (x, y), (x + width, y + height), color, 3)

            # Ajouter le num√©ro du livre
            cv2.putText(image_rgb, f"{i+1}", (x + 5, y + 30),
                       cv2.FONT_HERSHEY_SIMPLEX, 1, color, 2)

        return image_rgb

    except Exception as e:
        st.error(f"Erreur lors de la visualisation : {str(e)}")
        return None

# Interface principale
def main():
    st.header("üñºÔ∏è Upload et traitement d'image")

    # Upload d'image
    uploaded_file = st.file_uploader(
        "Choisissez une image d'√©tag√®re de livres",
        type=['jpg', 'jpeg', 'png'],
        help="Formats support√©s : JPG, PNG. Taille recommand√©e : 1000px minimum"
    )


    if uploaded_file is not None:
        image = Image.open(uploaded_file)

        # 1√®re ligne : image originale + param√®tres
        col_img, col_params = st.columns([1, 1])
        with col_img:
            st.subheader("üì∑ Image originale")
            st.image(image, use_container_width=True)
        with col_params:
            st.subheader("‚öôÔ∏è Param√®tres de traitement")
            ocr_engine = st.selectbox(
                "Moteur OCR",
                ["EasyOCR", "Tesseract", "TrOCR"],
                index=0,
                help="Choisissez le moteur OCR √† utiliser"
            )
            st.session_state['ocr_engine'] = ocr_engine
            confidence = st.slider(
                "Seuil de confiance OCR",
                min_value=0.1,
                max_value=1.0,
                value=0.3,
                step=0.1,
                help="0.1 = tol√©rant, 0.5 = strict. Recommand√© : 0.3"
            )
            use_gpu = st.checkbox(
                "Utiliser le GPU (recommand√©)",
                value=True,
                help="Acc√©l√®re le traitement si GPU disponible"
            )
            debug_mode = st.checkbox(
                "Mode debug",
                value=False,
                help="Affiche les analyses d√©taill√©es (plus lent)"
            )
            enrich_with_ol = st.checkbox(
                "Enrichir avec Open Library",
                value=True,
                help="Recherche les m√©tadonn√©es des livres sur Open Library (n√©cessite connexion internet)"
            )

        # 2√®me ligne : r√©sultats et livres d√©tect√©s
        st.markdown("---")
        if st.button("üöÄ Lancer l'analyse OCR", type="primary", use_container_width=True):
            with st.spinner("üîç Analyse en cours avec algorithme adaptatif..."):
                with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as tmp_file:
                    if image.mode == 'RGBA':
                        background = Image.new('RGB', image.size, (255, 255, 255))
                        background.paste(image, mask=image.split()[-1])
                        background.save(tmp_file.name, 'JPEG')
                    else:
                        rgb_image = image.convert('RGB')
                        rgb_image.save(tmp_file.name, 'JPEG')
                    temp_path = tmp_file.name

                try:
                    results, processing_time = process_image_with_ocr(
                        temp_path,
                        confidence=confidence,
                        use_gpu=use_gpu,
                        debug=debug_mode
                    )

                    if results:
                        enriched_books = None
                        if enrich_with_ol and results.get('books'):
                            with st.spinner("üîç Enrichissement avec Open Library..."):
                                ol_client = OpenLibraryClient(timeout=10)
                                enriched_books = enrich_books_with_openlibrary(results['books'], ol_client)

                        st.success("‚úÖ Analyse termin√©e !" + (" + Enrichissement OL" if enrich_with_ol else ""))
                        st.markdown("---")

                        # 2√®me ligne : r√©sultats et livres d√©tect√©s (pleine largeur)
                        display_results(results, processing_time, enriched_books)

                        # 3√®me ligne : d√©tails et visualisation des zones d√©tect√©es
                        st.markdown("---")
                        st.subheader("üëÅÔ∏è Visualisation des zones d√©tect√©es")
                        books = results.get('books')
                        if books:
                            viz_image = visualize_detected_zones(temp_path, books)
                            col_det, col_viz = st.columns([1, 1])
                            with col_det:
                                st.markdown("### üìã D√©tails par livre")
                                for i, book in enumerate(enriched_books if enriched_books else books, 1):
                                    enriched = book.get('enriched', False)
                                    with st.expander(f"ÔøΩ Livre {i} - {book.get('text', 'N/A')[:50]}..."):
                                        st.write(f"**Texte OCR :** {book.get('text', 'N/A')}")
                                        st.write(f"**Confiance :** {book.get('confidence', 0):.1%}")
                                        if enriched:
                                            st.write(f"**Titre Open Library :** {book.get('openlibrary_title', 'N/A')}")
                                            st.write(f"**Auteur :** {book.get('openlibrary_author', 'N/A')}")
                                            st.write(f"**Ann√©e :** {book.get('openlibrary_year', 'N/A')}")
                                            cover_url = book.get('openlibrary_cover_url')
                                            if cover_url:
                                                st.image(cover_url, width=100, caption="Couverture")
                                            else:
                                                st.write("ÔøΩÔ∏è *Pas de couverture disponible*")
                                            ol_url = book.get('openlibrary_url')
                                            if ol_url:
                                                st.markdown(f"[üîó Voir sur Open Library]({ol_url})")
                            with col_viz:
                                if viz_image is not None:
                                    st.image(viz_image, caption=f"{len(books)} livres d√©tect√©s", use_container_width=True)
                                    st.info("üí° **L√©gende :** Chaque rectangle color√© repr√©sente un livre d√©tect√© avec son num√©ro")
                                else:
                                    st.warning("‚ö†Ô∏è Impossible de cr√©er la visualisation")
                        with st.expander("üîß Informations techniques"):
                            st.json(results)
                    else:
                        st.error("‚ùå √âchec de l'analyse OCR")
                finally:
                    os.unlink(temp_path)
    else:
        st.info("üëÜ Veuillez uploader une image d'√©tag√®re de livres pour commencer l'analyse")
        st.markdown("### üí° Conseils d'utilisation")
        st.markdown("""
        - **Qualit√© d'image** : Photos bien √©clair√©es, perpendiculaires √† l'√©tag√®re
        - **Taille minimale** : 1000 pixels de largeur recommand√©e
        - **Formats** : JPG ou PNG
        - **Contenu** : √âtageres de livres avec titres visibles
        """)


def ocr_comparison_page():
    st.header("üìä Comparaison des moteurs OCR")
    st.markdown("Comparez plusieurs moteurs OCR sur la m√™me image.")

    engines = ["EasyOCR", "Tesseract", "TrOCR"]
    selected_engines = st.multiselect(
        "S√©lectionnez les moteurs OCR √† comparer",
        options=engines,
        default=["EasyOCR", "Tesseract"],
        help="Choisissez au moins deux moteurs pour la comparaison."
    )
    if len(selected_engines) < 2:
        st.warning("Veuillez s√©lectionner au moins deux moteurs OCR.")
        return

    uploaded_file = st.file_uploader(
        "T√©l√©chargez une image pour la comparaison",
        type=['jpg', 'jpeg', 'png'],
        help="Formats support√©s : JPG, PNG. Taille recommand√©e : 1000px minimum"
    )
    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        st.image(image, caption="Image √† comparer", use_container_width=True)
        confidence = st.slider(
            "Seuil de confiance OCR",
            min_value=0.1,
            max_value=1.0,
            value=0.3,
            step=0.1,
            help="0.1 = tol√©rant, 0.5 = strict. Recommand√© : 0.3"
        )
        use_gpu = st.checkbox(
            "Utiliser le GPU (recommand√©)",
            value=True,
            help="Acc√©l√®re le traitement si GPU disponible"
        )
        debug_mode = st.checkbox(
            "Mode debug",
            value=False,
            help="Affiche les analyses d√©taill√©es (plus lent)"
        )
        if st.button("üöÄ Comparer les moteurs OCR", type="primary", use_container_width=True):
            progress_bar = st.progress(0)
            with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as tmp_file:
                if image.mode == 'RGBA':
                    background = Image.new('RGB', image.size, (255, 255, 255))
                    background.paste(image, mask=image.split()[-1])
                    background.save(tmp_file.name, 'JPEG')
                else:
                    rgb_image = image.convert('RGB')
                    rgb_image.save(tmp_file.name, 'JPEG')
                temp_path = tmp_file.name
            try:
                results_dict = {}
                images_with_boxes = {}
                for idx, engine in enumerate(selected_engines):
                    progress_bar.progress(int((idx/len(selected_engines))*100))
                    if engine == "EasyOCR":
                        processor = EasyOCRProcessor(['en'], confidence, use_gpu)
                        pil_image = Image.open(temp_path)
                        boxes = processor.get_boxes(
                            pil_image,
                            preprocess=False,
                            use_spine_detection=True,
                            debug=debug_mode,
                            reference_titles=None,
                        )
                        text, avg_confidence = processor.get_text_and_confidence(
                            pil_image,
                            preprocess=False,
                            use_spine_detection=True,
                            reference_titles=None,
                            spine_method="shelfie"
                        )
                    elif engine == "Tesseract":
                        processor = TesseractOCRProcessor('eng', confidence, use_gpu)
                        pil_image = Image.open(temp_path)
                        boxes = processor.get_boxes(pil_image)
                        text, avg_confidence = processor.get_text_and_confidence(pil_image)
                    elif engine == "TrOCR":
                        processor = TrOCRProcessor(['en'], confidence, use_gpu)
                        pil_image = Image.open(temp_path)
                        boxes = processor.get_boxes(pil_image)
                        text, avg_confidence = processor.get_text_and_confidence(pil_image)
                    else:
                        st.error(f"Moteur OCR inconnu : {engine}")
                        continue
                    results_dict[engine] = {
                        'books': boxes,
                        'text': text,
                        'confidence': avg_confidence,
                        'processing_time': None
                    }
                    # G√©n√©rer image avec bounding boxes
                    img_cv = cv2.imread(temp_path)
                    img_rgb = cv2.cvtColor(img_cv, cv2.COLOR_BGR2RGB)
                    for i, book in enumerate(boxes):
                        x = int(book.get('x', 0))
                        y = int(book.get('y', 0))
                        w = int(book.get('width', 0))
                        h = int(book.get('height', 0))
                        color = (255, 0, 0) if engine=="EasyOCR" else (0,255,0) if engine=="Tesseract" else (0,0,255)
                        cv2.rectangle(img_rgb, (x, y), (x + w, y + h), color, 3)
                        cv2.putText(img_rgb, f"{i+1}", (x + 5, y + 30), cv2.FONT_HERSHEY_SIMPLEX, 1, color, 2)
                    images_with_boxes[engine] = img_rgb
                progress_bar.progress(100)
                st.success("Comparaison termin√©e !")

                # Affichage des images avec bounding boxes c√¥te √† c√¥te
                st.markdown("## Visualisation des bounding boxes par moteur")
                img_cols = st.columns(len(selected_engines))
                for idx, engine in enumerate(selected_engines):
                    with img_cols[idx]:
                        st.image(images_with_boxes[engine], caption=f"{engine}", use_container_width=True)

                # Display results side-by-side
                st.markdown("## R√©sultats par moteur")
                cols = st.columns(len(selected_engines))
                for idx, engine in enumerate(selected_engines):
                    with cols[idx]:
                        st.markdown(f"### {engine}")
                        res = results_dict[engine]
                        st.write(f"**Texte OCR :** {res['text']}")
                        st.write(f"**Confiance moyenne :** {res['confidence']:.1%}")
                        st.write(f"**Livres d√©tect√©s :** {len(res['books'])}")
                        # Table of books
                        if res['books']:
                            books_data = []
                            for i, book in enumerate(res['books'], 1):
                                books_data.append({
                                    "N¬∞": i,
                                    "Texte": book.get('text', 'N/A'),
                                    "Confiance": f"{book.get('confidence', 0):.1%}",
                                })
                            st.dataframe(books_data)
                        else:
                            st.warning("Aucun livre d√©tect√©.")

                # Graphiques avanc√©s
                st.markdown("## Graphiques de comparaison avanc√©s")
                import pandas as pd
                confs = [results_dict[e]['confidence'] for e in selected_engines]
                nb_books = [len(results_dict[e]['books']) for e in selected_engines]
                df = pd.DataFrame({
                    'Moteur': selected_engines,
                    'Confiance moyenne': confs,
                    'Livres d√©tect√©s': nb_books
                })
                st.bar_chart(df.set_index('Moteur')[['Confiance moyenne', 'Livres d√©tect√©s']])
                # Distribution des confiances
                st.markdown("### Distribution des confiances par moteur")
                for engine in selected_engines:
                    confs_list = [book.get('confidence', 0) for book in results_dict[engine]['books']]
                    st.line_chart(confs_list, height=150)
                # Heatmap du nombre de livres d√©tect√©s (si pertinent)
                st.markdown("### Heatmap Livres d√©tect√©s")
                import numpy as np
                heatmap_data = np.array(nb_books).reshape(1, -1)
                st.dataframe(heatmap_data)
            finally:
                os.unlink(temp_path)

if __name__ == "__main__":
    if 'page' not in locals():
        page = "Analyse OCR"
    if page == "Analyse OCR":
        main()
    elif page == "Comparaison OCR":
        ocr_comparison_page()

