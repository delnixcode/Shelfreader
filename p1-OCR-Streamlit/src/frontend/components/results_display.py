"""
Composant d'affichage des r√©sultats - ShelfReader P1

Ce module g√®re l'affichage structur√© des r√©sultats OCR,
incluant les m√©triques, tableaux de livres et statistiques.
"""

import streamlit as st
import numpy as np
import pandas as pd
import html
from typing import Dict, List, Optional, Any


def display_results(results: Dict, processing_time: float,
                   enriched_books: Optional[List[Dict]] = None) -> None:
    """
    Affiche les r√©sultats de l'OCR de mani√®re structur√©e et compl√®te.

    Cette fonction cr√©e une interface utilisateur compl√®te pour pr√©senter
    les r√©sultats de l'analyse OCR, avec m√©triques, tableaux et d√©tails.

    Args:
        results (Dict): R√©sultats bruts de l'OCR contenant 'books', 'text', 'confidence'
        processing_time (float): Temps de traitement en secondes
        enriched_books (Optional[List[Dict]]): Livres enrichis avec Open Library (si disponible)
    """
    if not results or 'books' not in results:
        st.error("Aucun r√©sultat OCR trouv√©")
        return

    # Utiliser les livres enrichis si disponibles
    books = enriched_books if enriched_books else results['books']

    # Section m√©triques principales
    st.subheader("üìä R√©sultats de l'analyse")
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("üìö Livres d√©tect√©s", len(books))

    with col2:
        avg_confidence = np.mean([book.get('confidence', 0) for book in books]) if books else 0
        st.metric("üéØ Confiance moyenne", f"{avg_confidence:.1%}")

    with col3:
        st.metric("‚ö° Temps de traitement", f"{processing_time:.2f}s")

    with col4:
        enriched_count = sum(1 for book in books if book.get('enriched', False))
        st.metric("üìö Enrichis Open Library", f"{enriched_count}/{len(books)}")

    st.markdown("---")

    # Section tableau d√©taill√© des livres
    st.subheader("üìñ Livres d√©tect√©s")

    if books:
        # Pr√©paration des donn√©es pour le tableau
        books_data = []
        for i, book in enumerate(books, 1):
            enriched = book.get('enriched', False)
            year = book.get('openlibrary_year', 'N/A') if enriched else 'N/A'
            year_str = str(year) if year != 'N/A' else 'N/A'
            ol_url = book.get('openlibrary_url') if enriched else None

            books_data.append({
                "N¬∞": i,
                "Titre OCR": book.get('text', 'N/A'),
                "Titre OL": book.get('openlibrary_title', 'N/A') if enriched else 'Non enrichi',
                "Auteur": book.get('openlibrary_author', 'N/A') if enriched else 'N/A',
                "Ann√©e": year_str,
                "Confiance": f"{book.get('confidence', 0):.1%}",
                "Enrichi": "‚úÖ" if enriched else "‚ùå",
                "Lien Open Library": ol_url if ol_url else ""
            })

        # Fonction helper pour cr√©er les liens HTML
        def make_link(url: str) -> str:
            """Cr√©e un lien HTML cliquable pour Open Library."""
            if url:
                return f'<a href="{html.escape(url)}" target="_blank">üîó Open Library</a>'
            return ""

        # Cr√©ation du tableau HTML pour les liens cliquables
        table_html = "<table style='width:100%; border-collapse:collapse;'>"
        # En-t√™tes
        headers = ["N¬∞", "Titre OCR", "Titre OL", "Auteur", "Ann√©e", "Confiance", "Enrichi", "Lien Open Library"]
        table_html += "<tr>" + "".join([f"<th style='border:1px solid #ccc; padding:4px'>{h}</th>" for h in headers]) + "</tr>"
        # Lignes de donn√©es
        for row in books_data:
            table_html += "<tr>"
            for h in headers[:-1]:  # Tous sauf le dernier (lien)
                table_html += f"<td style='border:1px solid #ccc; padding:4px'>{html.escape(str(row[h]))}</td>"
            # Lien cliquable sp√©cial
            table_html += f"<td style='border:1px solid #ccc; padding:4px'>{make_link(row['Lien Open Library'])}</td>"
            table_html += "</tr>"
        table_html += "</table>"

        st.markdown(table_html, unsafe_allow_html=True)

    else:
        st.warning("‚ö†Ô∏è Aucun livre d√©tect√© dans cette image")


def display_comparison_results(results_dict: Dict[str, Dict],
                             selected_engines: List[str]) -> None:
    """
    Affiche les r√©sultats de comparaison entre plusieurs moteurs OCR.

    Args:
        results_dict (Dict[str, Dict]): R√©sultats par moteur OCR
        selected_engines (List[str]): Liste des moteurs compar√©s
    """
    st.markdown("## R√©sultats par moteur")

    # Affichage c√¥te √† c√¥te
    cols = st.columns(len(selected_engines))

    for idx, engine in enumerate(selected_engines):
        with cols[idx]:
            st.markdown(f"### {engine}")
            res = results_dict[engine]

            # M√©triques principales
            st.write(f"**Texte OCR :** {res.get('text', 'N/A')}")
            st.write(f"**Confiance moyenne :** {res.get('confidence', 0):.1%}")
            st.write(f"**Livres d√©tect√©s :** {len(res.get('books', []))}")

            # Tableau des livres pour ce moteur
            books = res.get('books', [])
            if books:
                books_data = []
                for i, book in enumerate(books, 1):
                    books_data.append({
                        "N¬∞": i,
                        "Texte": book.get('text', 'N/A'),
                        "Confiance": f"{book.get('confidence', 0):.1%}",
                    })
                st.dataframe(books_data)
            else:
                st.warning("Aucun livre d√©tect√©.")


def display_comparison_charts(results_dict: Dict[str, Dict],
                            selected_engines: List[str]) -> None:
    """
    Affiche les graphiques de comparaison avanc√©s.

    Args:
        results_dict (Dict[str, Dict]): R√©sultats par moteur OCR
        selected_engines (List[str]): Liste des moteurs compar√©s
    """
    st.markdown("## Graphiques de comparaison avanc√©s")

    # Pr√©paration des donn√©es
    confs = [results_dict[e].get('confidence', 0) for e in selected_engines]
    nb_books = [len(results_dict[e].get('books', [])) for e in selected_engines]

    df = pd.DataFrame({
        'Moteur': selected_engines,
        'Confiance moyenne': confs,
        'Livres d√©tect√©s': nb_books
    })

    # Graphique en barres
    st.bar_chart(df.set_index('Moteur')[['Confiance moyenne', 'Livres d√©tect√©s']])

    # Distribution des confiances
    st.markdown("### Distribution des confiances par moteur")
    for engine in selected_engines:
        confs_list = [book.get('confidence', 0) for book in results_dict[engine].get('books', [])]
        if confs_list:
            st.line_chart(confs_list, height=150)
        else:
            st.write(f"**{engine}**: Aucune donn√©e de confiance disponible")

    # Heatmap du nombre de livres d√©tect√©s
    st.markdown("### Heatmap Livres d√©tect√©s")
    import numpy as np
    heatmap_data = np.array(nb_books).reshape(1, -1)
    st.dataframe(heatmap_data)