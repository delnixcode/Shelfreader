"""
Page d'analyse OCR - ShelfReader P1

Cette page permet l'analyse OCR d'une image d'√©tag√®re de livres
avec enrichissement optionnel via Open Library.
"""

import streamlit as st
import tempfile
import os
from PIL import Image

from components.results_display import display_results
from components.visualization import display_visualization, display_book_details
from utils.ocr_processing import ocr_processor
from utils.openlibrary_enrichment import openlibrary_enricher


def show():
    """
    Affiche la page principale d'analyse OCR.

    Cette fonction g√®re:
    - L'upload d'image
    - La configuration des param√®tres OCR
    - Le traitement OCR avec le moteur s√©lectionn√©
    - L'enrichissement optionnel avec Open Library
    - L'affichage des r√©sultats et visualisations
    """
    st.header("üñºÔ∏è Upload et traitement d'image")

    # Upload d'image
    uploaded_file = st.file_uploader(
        "Choisissez une image d'√©tag√®re de livres",
        type=['jpg', 'jpeg', 'png'],
        help="Formats support√©s : JPG, PNG. Taille recommand√©e : 1000px minimum"
    )

    if uploaded_file is not None:
        # Charger et afficher l'image
        image = Image.open(uploaded_file)

        # Layout: image originale + param√®tres
        col_img, col_params = st.columns([1, 1])

        with col_img:
            st.subheader("üì∑ Image originale")
            st.image(image, use_container_width=True)

        with col_params:
            st.subheader("‚öôÔ∏è Param√®tres de traitement")

            # S√©lection du moteur OCR
            ocr_engine = st.selectbox(
                "Moteur OCR",
                ["EasyOCR", "Tesseract", "TrOCR"],
                index=0,
                help="Choisissez le moteur OCR √† utiliser"
            )

            # Param√®tres de traitement
            confidence = st.slider(
                "Seuil de confiance OCR",
                min_value=0.1,
                max_value=1.0,
                value=0.3,
                step=0.1,
                help="0.1 = tol√©rant, 0.5 = strict. Recommand√© : 0.3"
            )

            use_gpu = st.checkbox(
                "Utiliser le GPU (recommand√©)",
                value=True,
                help="Acc√©l√®re le traitement si GPU disponible"
            )

            debug_mode = st.checkbox(
                "Mode debug",
                value=False,
                help="Affiche les analyses d√©taill√©es (plus lent)"
            )

            # Option d'enrichissement
            enrich_with_ol = st.checkbox(
                "Enrichir avec Open Library",
                value=True,
                help="Recherche les m√©tadonn√©es des livres sur Open Library (n√©cessite connexion internet)"
            )

        st.markdown("---")

        # Bouton de traitement
        if st.button("üöÄ Lancer l'analyse OCR", type="primary", use_container_width=True):
            with st.spinner("üîç Analyse en cours avec algorithme adaptatif..."):
                # Sauvegarde temporaire de l'image
                with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as tmp_file:
                    # Conversion en RGB si n√©cessaire
                    if image.mode == 'RGBA':
                        background = Image.new('RGB', image.size, (255, 255, 255))
                        background.paste(image, mask=image.split()[-1])
                        background.save(tmp_file.name, 'JPEG')
                    else:
                        rgb_image = image.convert('RGB')
                        rgb_image.save(tmp_file.name, 'JPEG')
                    temp_path = tmp_file.name

                try:
                    # Traitement OCR
                    results, processing_time = ocr_processor.process_image(
                        temp_path,
                        engine_name=ocr_engine,
                        confidence=confidence,
                        use_gpu=use_gpu,
                        debug=debug_mode
                    )

                    if results:
                        # Enrichissement optionnel
                        enriched_books = None
                        if enrich_with_ol and results.get('books'):
                            with st.spinner("üîç Enrichissement avec Open Library..."):
                                enriched_books = openlibrary_enricher.enrich_books(results['books'])

                        # Message de succ√®s
                        success_msg = "‚úÖ Analyse termin√©e !"
                        if enrich_with_ol:
                            success_msg += " + Enrichissement OL"
                        st.success(success_msg)

                        st.markdown("---")

                        # Affichage des r√©sultats
                        display_results(results, processing_time, enriched_books)

                        # Section visualisation et d√©tails
                        st.markdown("---")

                        # Visualisation des zones d√©tect√©es
                        books = enriched_books if enriched_books else results.get('books', [])
                        display_visualization(temp_path, books)

                        # D√©tails par livre
                        if books:
                            col_det, col_viz = st.columns([1, 1])
                            with col_det:
                                display_book_details(books, temp_path)

                        # Section informations techniques (expandable)
                        with st.expander("üîß Informations techniques"):
                            st.json(results)

                    else:
                        st.error("‚ùå √âchec de l'analyse OCR")

                finally:
                    # Nettoyage du fichier temporaire
                    os.unlink(temp_path)

    else:
        # Message d'accueil quand aucune image n'est upload√©e
        st.info("üëÜ Veuillez uploader une image d'√©tag√®re de livres pour commencer l'analyse")